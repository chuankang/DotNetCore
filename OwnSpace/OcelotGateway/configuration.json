//{
//  "ReRoutes": [
//    {
//      /*将用户的请求 /post/1 转发到 localhost/api/post/1*/

//      //转到的地址
//      "DownstreamPathTemplate": "/api/Values",
//      //转到的请求协议
//      "DownstreamScheme": "http",
//      //"DownstreamPort": 5001,
//      //"DownstreamHost": "localhost",
//      //转到的端口地址及端口信息
//      "DownstreamHostAndPorts": [
//        {
//          "Host": "localhost",
//          "Port": 5001
//        }
//      ],
//      //监听路由地址
//      "UpstreamPathTemplate": "/api/Values",
//      //监听路由请求类型 可用数组
//      "UpstreamHttpMethod": [ "Get" ],

//      /*
//   服务质量与熔断:熔断的意思是停止将请求转发到下游服务。当下游服务已经出现故障的时候再请求也是功而返，并且增加下游服务器和API网关的负担。这个功能是用的Pollly来实现的，我们只需要为路由做一些简单配置即可
//   ExceptionsAllowedBeforeBreaking 允许多少个异常请求
//   DurationOfBreak 熔断的时间，单位为秒
//   TimeoutValue 如果下游请求的处理时间超过多少则自如将请求设置为超时
//   */
//      "QoSOptions": {
//        "ExceptionsAllowedBeforeBreaking": 3,
//        "DurationOfBreak": 10,
//        "TimeoutValue": 6000
//      }
//      //,

//      //"HttpHandlerOptions": {
//      //  "AllowAutoRedirect": false,
//      //  "UseCookieContainer": false
//      //},

//      ////路由模板中的AuthenticationOptions进行配置，只需要我们的AuthenticationProviderKey一致即可。
//      //"AuthenticationOptions": {
//      //  "AuthenticationProviderKey": "TestKey",
//      //  "AllowedScopes": []
//      //}
//    },

//    {
//      "DownstreamPathTemplate": "/api/Products",
//      "DownstreamScheme": "http",
//      //"DownstreamPort": 5002,
//      //"DownstreamHost": "localhost",
//      "DownstreamHostAndPorts": [
//        {
//          "Host": "localhost",
//          "Port": 5002
//        }
//      ],
//      "UpstreamPathTemplate": "/api/Products",

//      "UpstreamHttpMethod": [ "Get" ],
//      "QoSOptions": {
//        "ExceptionsAllowedBeforeBreaking": 3,
//        "DurationOfBreak": 10,
//        "TimeoutValue": 6000
//      }
//      //,

//      //"HttpHandlerOptions": {
//      //  "AllowAutoRedirect": false,
//      //  "UseCookieContainer": false
//      //},

//      //"AuthenticationOptions": {
//      //  "AuthenticationProviderKey": "TestKey",
//      //  "AllowedScopes": []
//      //}
//    }
//  ],
//  "GlobalConfiguration": {
//    "BaseUrl": "http://localhost:5000"
//  }
//}


{
  "ReRoutes": [
    {
      "DownstreamPathTemplate": "/DemoAAPI/swagger.json",
      "DownstreamScheme": "http",
      //"ServiceName": "userapi",
      //"LoadBalancer": "RoundRobin",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5001
        }
      ],
      "UseServiceDiscovery": false,
      "UpstreamPathTemplate": "/DemoAAPI/swagger.json",
      "UpstreamHttpMethod": [ "GET", "POST", "DELETE", "PUT" ]
    },
    {
      "DownstreamPathTemplate": "/DemoBAPI/swagger.json",
      "DownstreamScheme": "http",
      //"ServiceName": "basedataapi",
      //"LoadBalancer": "RoundRobin",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5002
        }
      ],
      "UseServiceDiscovery": false,
      "UpstreamPathTemplate": "/DemoBAPI/swagger.json",
      "UpstreamHttpMethod": [ "GET", "POST", "DELETE", "PUT" ]
    },

    {
      //监听路由地址
      "UpstreamPathTemplate": "/api/values",
      //转到的端口地址及端口信息
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5001
        }
      ],
      //转到的地址
      "DownstreamPathTemplate": "/api/values",

      //监听路由请求类型 可用数组
      "UpstreamHttpMethod": [ "Get", "Put", "Post" ],
      "AddHeadersToRequest": {},
      "AddClaimsToRequest": {},
      "RouteClaimsRequirement": {},
      "AddQueriesToRequest": {},
      "RequestIdKey": "",
      "FileCacheOptions": {
        "TtlSeconds": 0,
        "Region": ""
      },
      "ReRouteIsCaseSensitive": false,
      "ServiceName": "",
      //转到的请求协议
      "DownstreamScheme": "http",
      //服务质量与熔断:熔断的意思是停止将请求转发到下游服务。当下游服务已经出现故障的时候再请求也是功而返，并且增加下游服务器和API网关的负担。这个功能是用的Pollly来实现的，我们只需要为路由做一些简单配置即可
      //ExceptionsAllowedBeforeBreaking 允许多少个异常请求
      //DurationOfBreak 熔断的时间，单位为秒
      //TimeoutValue 如果下游请求的处理时间超过多少则自如将请求设置为超时
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 0,
        "DurationOfBreak": 0,
        "TimeoutValue": 0
      },
      "LoadBalancer": "",
      "RateLimitOptions": {
        "ClientWhitelist": [],
        "EnableRateLimiting": false,
        "Period": "",
        "PeriodTimespan": 0,
        "Limit": 0
      },

      //路由模板中的AuthenticationOptions进行配置，只需要我们的AuthenticationProviderKey一致即可。
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "",
        "AllowedScopes": []
      },
      "HttpHandlerOptions": {
        "AllowAutoRedirect": false,
        "UseCookieContainer": false,
        "UseTracing": false
      },
      "UseServiceDiscovery": false
    },


    {
      //监听路由地址
      "UpstreamPathTemplate": "/api/Products/GetId",
      //转到的端口地址及端口信息
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5002
        }
      ],
      //转到的地址
      "DownstreamPathTemplate": "/api/Products/GetId",
      //监听路由请求类型 可用数组
      "UpstreamHttpMethod": [ "Get" ],
      "AddHeadersToRequest": {},
      "AddClaimsToRequest": {},
      "RouteClaimsRequirement": {},
      "AddQueriesToRequest": {},
      "RequestIdKey": "",
      "FileCacheOptions": {
        "TtlSeconds": 0,
        "Region": ""
      },
      "ReRouteIsCaseSensitive": false,
      "ServiceName": "",
      //转到的请求协议
      "DownstreamScheme": "http",
      //服务质量与熔断:熔断的意思是停止将请求转发到下游服务。当下游服务已经出现故障的时候再请求也是功而返，并且增加下游服务器和API网关的负担。这个功能是用的Pollly来实现的，我们只需要为路由做一些简单配置即可
      //ExceptionsAllowedBeforeBreaking 允许多少个异常请求
      //DurationOfBreak 熔断的时间，单位为秒
      //TimeoutValue 如果下游请求的处理时间超过多少则自如将请求设置为超时
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 0,
        "DurationOfBreak": 0,
        "TimeoutValue": 0
      },
      "LoadBalancer": "",
      "RateLimitOptions": {
        "ClientWhitelist": [],
        "EnableRateLimiting": false,
        "Period": "",
        "PeriodTimespan": 0,
        "Limit": 0
      },
      "AuthenticationOptions": {
        "AuthenticationProviderKey": "",
        "AllowedScopes": []
      },
      "HttpHandlerOptions": {
        "AllowAutoRedirect": false,
        "UseCookieContainer": false,
        "UseTracing": false
      },
      "UseServiceDiscovery": false
    }
  ],

  "GlobalConfiguration": {
  }
}
